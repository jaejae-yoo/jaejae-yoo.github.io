{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/java-programmers-12939-번","result":{"data":{"post":{"__typename":"MdxPost","slug":"/java-programmers-12939-번","title":"[Java]  programmers 12939번","date":"08.03.2021","tags":[{"name":"programmers","slug":"programmers"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"[Java]  programmers 12939번\",\n  \"date\": \"2021-03-08T00:00:00.000Z\",\n  \"tags\": [\"programmers\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"h2\", {\n    parentName: \"blockquote\"\n  }, \"[programmers]\", \" 12939\\uBC88\")), mdx(\"h4\", null, \"\\uBB38\\uC81C\"), mdx(\"p\", null, \"\\uBB38\\uC790\\uC5F4 s\\uC5D0\\uB294 \\uACF5\\uBC31\\uC73C\\uB85C \\uAD6C\\uBD84\\uB41C \\uC22B\\uC790\\uB4E4\\uC774 \\uC800\\uC7A5\\uB418\\uC5B4 \\uC788\\uC2B5\\uB2C8\\uB2E4. str\\uC5D0 \\uB098\\uD0C0\\uB098\\uB294 \\uC22B\\uC790 \\uC911 \\uCD5C\\uC18C\\uAC12\\uACFC \\uCD5C\\uB300\\uAC12\\uC744 \\uCC3E\\uC544 \\uC774\\uB97C \\\"(\\uCD5C\\uC18C\\uAC12) (\\uCD5C\\uB300\\uAC12)\\\"\\uD615\\uD0DC\\uC758 \\uBB38\\uC790\\uC5F4\\uC744 \\uBC18\\uD658\\uD558\\uB294 \\uD568\\uC218, solution\\uC744 \\uC644\\uC131\\uD558\\uC138\\uC694.\\n\\uC608\\uB97C\\uB4E4\\uC5B4 s\\uAC00 \\\"1 2 3 4\\\"\\uB77C\\uBA74 \\\"1 4\\\"\\uB97C \\uB9AC\\uD134\\uD558\\uACE0, \\\"-1 -2 -3 -4\\\"\\uB77C\\uBA74 \\\"-4 -1\\\"\\uC744 \\uB9AC\\uD134\\uD558\\uBA74 \\uB429\\uB2C8\\uB2E4.\"), mdx(\"h5\", null, \"\\uC81C\\uD55C \\uC0AC\\uD56D\"), mdx(\"p\", null, \"s\\uC5D0\\uB294 \\uB458 \\uC774\\uC0C1\\uC758 \\uC815\\uC218\\uAC00 \\uACF5\\uBC31\\uC73C\\uB85C \\uAD6C\\uBD84\\uB418\\uC5B4 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \"\\uD480\\uC774\")), mdx(\"p\", null, \"\\uC815\\uB9D0 \\uAC04\\uB2E8\\uD55C \\uBB38\\uC81C\\uC778\\uB370 \\uC790\\uBC14\\uC0AC\\uC6A9\\uD55C\\uC9C0 \\uC624\\uB798\\uB3FC\\uC11C \\uD658\\uAE30\\uD560\\uACB8 \\uD480\\uC5C8\\uB2E4.\"), mdx(\"p\", null, \"\\uADF8\\uB0E5 \\uD06C\\uAE30 \\uC21C\\uC73C\\uB85C \\uC815\\uB82C\\uD558\\uACE0 \\uCD5C\\uC19F\\uAC12\\uACFC \\uCD5C\\uB313\\uAC12 \\uCD9C\\uB825\\uD558\\uBA74 \\uB41C\\uB2E4.. \\uD760 \\uC65C LV2\\uC77C\\uAE4C?\"), mdx(\"p\", null, \"\\uC790\\uBC14\\uB294 \\uC815\\uB9D0 .... \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \" \", \"[\\uCF54\\uB4DC]\", \" \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import java.util.*;\\nimport java.util.Collections;\\nclass Solution {\\n    public String solution(String s) {\\n        String answer =\\\"\\\";\\n        List<Integer> answerList = new <Integer> ArrayList();\\n        String[] num = s.split(\\\" \\\");\\n        for (int i=0; i<num.length; i++){\\n            int number = Integer.parseInt(num[i]);\\n            answerList.add(number);\\n        }\\n        Collections.sort(answerList);\\n        answer += Integer.toString(answerList.remove(0))+\\\" \\\";\\n        answer += Integer.toString(answerList.remove(answerList.size()-1));\\n        return answer;\\n    }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"programmers  12939번 문제 문자열 s에는 공백으로 구분된 숫자들이 저장되어 있습니다. str에 나타나는 숫자 중 최소값과 최대값을 찾아 이를 \"(최소값) (최대값)\"형태의 문자열을 반환하는 함수, solution…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/java-programmers-12939-번","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}