{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/boj-1325-번","result":{"data":{"post":{"__typename":"MdxPost","slug":"/boj-1325-번","title":"BOJ_1325번","date":"26.02.2021","tags":[{"name":"BOJ","slug":"boj"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"BOJ_1325번\",\n  \"date\": \"2021-02-26T00:00:00.000Z\",\n  \"tags\": [\"BOJ\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"h2\", {\n    parentName: \"blockquote\"\n  }, \"[BOJ]\", \" 1325\\uBC88\")), mdx(\"h4\", null, \"\\uBB38\\uC81C\"), mdx(\"p\", null, \"\\uD574\\uCEE4 \\uAE40\\uC9C0\\uBBFC\\uC740 \\uC798 \\uC54C\\uB824\\uC9C4 \\uC5B4\\uB290 \\uD68C\\uC0AC\\uB97C \\uD574\\uD0B9\\uD558\\uB824\\uACE0 \\uD55C\\uB2E4. \\uC774 \\uD68C\\uC0AC\\uB294 N\\uAC1C\\uC758 \\uCEF4\\uD4E8\\uD130\\uB85C \\uC774\\uB8E8\\uC5B4\\uC838 \\uC788\\uB2E4. \\uAE40\\uC9C0\\uBBFC\\uC740 \\uADC0\\uCC2E\\uAE30 \\uB54C\\uBB38\\uC5D0, \\uD55C \\uBC88\\uC758 \\uD574\\uD0B9\\uC73C\\uB85C \\uC5EC\\uB7EC \\uAC1C\\uC758 \\uCEF4\\uD4E8\\uD130\\uB97C \\uD574\\uD0B9 \\uD560 \\uC218 \\uC788\\uB294 \\uCEF4\\uD4E8\\uD130\\uB97C \\uD574\\uD0B9\\uD558\\uB824\\uACE0 \\uD55C\\uB2E4.\"), mdx(\"p\", null, \"\\uC774 \\uD68C\\uC0AC\\uC758 \\uCEF4\\uD4E8\\uD130\\uB294 \\uC2E0\\uB8B0\\uD558\\uB294 \\uAD00\\uACC4\\uC640, \\uC2E0\\uB8B0\\uD558\\uC9C0 \\uC54A\\uB294 \\uAD00\\uACC4\\uB85C \\uC774\\uB8E8\\uC5B4\\uC838 \\uC788\\uB294\\uB370, A\\uAC00 B\\uB97C \\uC2E0\\uB8B0\\uD558\\uB294 \\uACBD\\uC6B0\\uC5D0\\uB294 B\\uB97C \\uD574\\uD0B9\\uD558\\uBA74, A\\uB3C4 \\uD574\\uD0B9\\uD560 \\uC218 \\uC788\\uB2E4\\uB294 \\uC18C\\uB9AC\\uB2E4.\"), mdx(\"p\", null, \"\\uC774 \\uD68C\\uC0AC\\uC758 \\uCEF4\\uD4E8\\uD130\\uC758 \\uC2E0\\uB8B0\\uD558\\uB294 \\uAD00\\uACC4\\uAC00 \\uC8FC\\uC5B4\\uC84C\\uC744 \\uB54C, \\uD55C \\uBC88\\uC5D0 \\uAC00\\uC7A5 \\uB9CE\\uC740 \\uCEF4\\uD4E8\\uD130\\uB97C \\uD574\\uD0B9\\uD560 \\uC218 \\uC788\\uB294 \\uCEF4\\uD4E8\\uD130\\uC758 \\uBC88\\uD638\\uB97C \\uCD9C\\uB825\\uD558\\uB294 \\uD504\\uB85C\\uADF8\\uB7A8\\uC744 \\uC791\\uC131\\uD558\\uC2DC\\uC624.\"), mdx(\"h5\", null, \"\\uC785\\uB825\"), mdx(\"p\", null, \"\\uCCAB\\uC9F8 \\uC904\\uC5D0, N\\uACFC M\\uC774 \\uB4E4\\uC5B4\\uC628\\uB2E4. N\\uC740 10,000\\uBCF4\\uB2E4 \\uC791\\uAC70\\uB098 \\uAC19\\uC740 \\uC790\\uC5F0\\uC218, M\\uC740 100,000\\uBCF4\\uB2E4 \\uC791\\uAC70\\uB098 \\uAC19\\uC740 \\uC790\\uC5F0\\uC218\\uC774\\uB2E4. \\uB458\\uC9F8 \\uC904\\uBD80\\uD130 M\\uAC1C\\uC758 \\uC904\\uC5D0 \\uC2E0\\uB8B0\\uD558\\uB294 \\uAD00\\uACC4\\uAC00 A B\\uC640 \\uAC19\\uC740 \\uD615\\uC2DD\\uC73C\\uB85C \\uB4E4\\uC5B4\\uC624\\uBA70, \\\"A\\uAC00 B\\uB97C \\uC2E0\\uB8B0\\uD55C\\uB2E4\\\"\\uB97C \\uC758\\uBBF8\\uD55C\\uB2E4. \\uCEF4\\uD4E8\\uD130\\uB294 1\\uBC88\\uBD80\\uD130 N\\uBC88\\uAE4C\\uC9C0 \\uBC88\\uD638\\uAC00 \\uD558\\uB098\\uC529 \\uB9E4\\uACA8\\uC838 \\uC788\\uB2E4.\"), mdx(\"h5\", null, \"\\uCD9C\\uB825\"), mdx(\"p\", null, \"\\uCCAB\\uC9F8 \\uC904\\uC5D0, \\uAE40\\uC9C0\\uBBFC\\uC774 \\uD55C \\uBC88\\uC5D0 \\uAC00\\uC7A5 \\uB9CE\\uC740 \\uCEF4\\uD4E8\\uD130\\uB97C \\uD574\\uD0B9\\uD560 \\uC218 \\uC788\\uB294 \\uCEF4\\uD4E8\\uD130\\uC758 \\uBC88\\uD638\\uB97C \\uC624\\uB984\\uCC28\\uC21C\\uC73C\\uB85C \\uCD9C\\uB825\\uD55C\\uB2E4.\"), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \"\\uD480\\uC774\")), mdx(\"p\", null, \"A\\uAC00 B\\uB97C \\uC2E0\\uB8B0\\uD558\\uB294 \\uACBD\\uC6B0 B\\uB294 A\\uC5D0 \\uC811\\uADFC \\uAC00\\uB2A5\\uD558\\uC9C0\\uB9CC, A\\uB294 B\\uC5D0 \\uC811\\uADFC\\uD560 \\uC218 \\uC5C6\\uB2E4.\\n\\uC989, \\uB2E8\\uBC29\\uD5A5 \\uADF8\\uB798\\uD504\\uC778 \\uAC83\\uC778\\uB2E4.\"), mdx(\"p\", null, \"\\uB530\\uB77C\\uC11C \\uBAA8\\uB4E0 \\uB178\\uB4DC\\uC5D0\\uC11C \\uAC01\\uAC01 \\uC811\\uADFC \\uAC00\\uB2A5\\uD55C \\uCEF4\\uD4E8\\uD130\\uC758 \\uC218\\uB97C bfs \\uC54C\\uACE0\\uB9AC\\uC998\\uC744 \\uD1B5\\uD574 \\uAD6C\\uD558\\uC600\\uB2E4. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \" \", \"[\\uCF54\\uB4DC]\", \" \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import copy, sys\\nfrom collections import deque\\nN, M=map(int, sys.stdin.readline().split())\\ngraph=[[] for _ in range(N+1)]\\nfor num in range(M):\\n    A, B=map(int, sys.stdin.readline().split())\\n    graph[B].append(A)\\n\\ndef bfs(start, cnt):\\n    visit = deque()\\n    visit.append(start)\\n    if len(visit) == 0:\\n        return cnt\\n    while len(visit) > 0:\\n        a = visit.popleft()\\n        if visited[a] == False:\\n            cnt +=1\\n            visited[a] = True\\n            for num in graph[a]:\\n                visit.append(num)\\n    return cnt\\n\\nanswer = []\\nmax_cnt = 0\\nfor i in range(1, N + 1):\\n    visited = [False] * (N + 1)\\n    cnt = bfs(i, 1)\\n    if max_cnt == cnt:\\n        answer.append(i)\\n    if max_cnt < cnt:\\n        max_cnt = cnt\\n        answer = []\\n        answer.append(i)\\nprint(*result)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"BOJ  1325번 문제 해커 김지민은 잘 알려진 어느 회사를 해킹하려고 한다. 이 회사는 N…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/boj-1325-번","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}